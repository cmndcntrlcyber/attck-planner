import streamlit as st
import logging
import time
from backend.threat_lookup import get_threat_actor_techniques
from backend.ollama_integration import generate_emulation_plan

# Configure logging
logging.basicConfig(
    filename="app.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

st.title("Adversary Threat Emulation Plan Generator")

# User inputs
actor_name = st.text_input("Enter Threat Actor Name (e.g., APT29)")
desired_impact = st.selectbox(
    "Select Desired Impact", 
    ["Data Exfiltration", "Credential Theft", "System Disruption"]
)

@st.cache_data(show_spinner=True)
def cached_get_threat_actor_techniques(actor_name):
    """ Cached function to fetch threat actor techniques """
    return get_threat_actor_techniques(actor_name)

if st.button("Generate Plan"):
    with st.spinner("Generating threat emulation plan..."):
        start_time = time.time()

        # Fetch threat actor techniques
        techniques = cached_get_threat_actor_techniques(actor_name)

        if techniques:
            # Generate adversary emulation plan
            plan = generate_emulation_plan(actor_name, desired_impact, techniques)

            # Log success
            logging.info(f"Plan generated for {actor_name} in {time.time() - start_time:.2f}s")

            st.success("Emulation Plan Generated Successfully!")

            # Display generated plan
            st.text_area("Generated Plan", plan, height=400)

            # Prepare content for download
            md_content = f"""
# Adversary Threat Emulation Plan

**Threat Actor:** {actor_name}  
**Desired Impact:** {desired_impact}

## Emulation Plan

{plan}

---

*Generated by Adversary Threat Emulation Planner*
            """

            # Download buttons
            st.download_button(
                label="Download as Markdown",
                data=md_content,
                file_name=f"{actor_name}_emulation_plan.md",
                mime="text/markdown"
            )

        else:
            st.error("Failed to generate emulation plan. No techniques found for the specified actor.")
            logging.error(f"No techniques found for threat actor: {actor_name}")
