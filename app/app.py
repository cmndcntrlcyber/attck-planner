# app.py

import streamlit as st
from backend.threat_lookup import get_threat_actor_techniques
from backend.ollama_integration import generate_emulation_plan
from backend.threat_lookup import parse_techniques_from_markdown
from backend.attck_gen import generate_script, save_script
import logging
import time

# Configure logging
logging.basicConfig(
    filename="app.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# Streamlit UI
st.title("Adversary Threat Emulation Plan Generator")

# User inputs
actor_name = st.text_input("Enter Threat Actor Name (e.g., APT29)")
desired_impact = st.selectbox(
    "Select Desired Impact", 
    ["Data Exfiltration", "Credential Theft", "System Disruption"]
)

@st.cache_data(show_spinner=True)
def cached_get_threat_actor_techniques(actor_name):
    """ Cached function to fetch threat actor techniques """
    return get_threat_actor_techniques(actor_name)

def format_markdown(actor_name, impact, plan):
    """Format the emulation plan as Markdown."""
    md_content = f"""
# Adversary Threat Emulation Plan

**Threat Actor:** {actor_name}  
**Desired Impact:** {impact}

## Emulation Plan

{plan}

---

*Generated by Adversary Threat Emulation Planner*
    """
    return md_content

def format_html(actor_name, impact, plan):
    """Format the emulation plan as HTML."""
    html_content = (
        "<html>"
        "<head><title>Adversary Emulation Plan</title></head>"
        "<body>"
        "<h1>Adversary Threat Emulation Plan</h1>"
        "<p><strong>Threat Actor:</strong> {}</p>"
        "<p><strong>Desired Impact:</strong> {}</p>"
        "<h2>Emulation Plan</h2>"
        "<p>{}</p>"
        "<hr>"
        "<footer><i>Generated by Adversary Threat Emulation Planner</i></footer>"
        "</body>"
        "</html>"
    ).format(actor_name, impact, plan.replace("\n", "<br>"))
    return html_content

uploaded_file = st.file_uploader("Upload an Emulation Plan (Markdown)", type=["md"])

if uploaded_file:
    with open("uploaded_plan.md", "wb") as f:
        f.write(uploaded_file.read())

    techniques = parse_techniques_from_markdown("uploaded_plan.md")
    
    if techniques:
        st.success(f"Detected {len(techniques)} techniques.")

        for technique in techniques:
            st.subheader(f"{technique['name']} ({technique['technique_id']})")
            st.write(f"**Description:** {technique['description']}")
            st.write(f"**Mitigation:** {technique['mitigation']}")

            if st.button(f"Generate Script for {technique['name']}"):
                with st.spinner("Generating script..."):
                    script = generate_script(technique['name'], technique['description'])
                    filepath = save_script(script)

                    st.success(f"Script Generated: {script['filename']}")
                    with open(filepath, "r") as f:
                        st.code(f.read(), language=script["language"].lower())

                    st.download_button(
                        label="Download Script",
                        data=open(filepath).read(),
                        file_name=script["filename"],
                        mime="text/plain"
                    )
    else:
        st.error("No techniques detected. Please check the file format.")

if st.button("Generate Plan"):
    with st.spinner("Generating threat emulation plan..."):
        start_time = time.time()

        # Get techniques (with caching)
        techniques = cached_get_threat_actor_techniques(actor_name)

        if techniques:
            # Generate emulation plan
            plan = generate_emulation_plan(actor_name, desired_impact, techniques)

            # Log success
            logging.info(f"Plan generated for {actor_name} in {time.time() - start_time:.2f}s")

            st.success("Emulation Plan Generated Successfully!")

            # Display generated plan
            st.text_area("Generated Plan", plan, height=400)

            # Prepare content for download
            md_content = format_markdown(actor_name, desired_impact, plan)
            html_content = format_html(actor_name, desired_impact, plan)

            # Download buttons for Markdown and HTML
            st.download_button(
                label="Download as Markdown",
                data=md_content,
                file_name=f"{actor_name}_emulation_plan.md",
                mime="text/markdown"
            )

            st.download_button(
                label="Download as HTML",
                data=html_content,
                file_name=f"{actor_name}_emulation_plan.html",
                mime="text/html"
            )

        else:
            st.error("Failed to generate emulation plan. No techniques found for the specified actor.")
            logging.error(f"No techniques found for threat actor: {actor_name}")
